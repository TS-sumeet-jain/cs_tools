[build-system]
requires = ["setuptools>=42"]
build-backend = "setuptools.build_meta"


[project]
name = "cs_tools"
dynamic = ["version"]
description = "Scale your ThoughtSpot adoption with tools created by the ThoughtSpot Solutions Consulting organization."
readme = "README.md"
requires-python = ">=3.7"
license = {file = "LICENSE"}
authors = [
	{name = "boonhapus", email="nicholas.cooper@thoughtspot.com"},
	{name = "billdback-ts", email="bill.back@thoughtspot.com"},
	{name = "devinmcpherson-ts", email="devin.mcpherson@thoughtspot.com"},
	{name = "mishathoughtspot", email="misha.beek@thoughtspot.com"},
]
maintainers = [
    {name = "boonhapus", email="nicholas.cooper@thoughtspot.com"},
]
classifiers = [
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # dependencies here are listed for cs_tools the library  (ie. import cs_tools)
    "pip >= 23.1",

    "thoughtspot_tml >= 2.0.6",
    "awesomeversion >= 22.9.0",
    "httpx >= 0.24.0",
    "pydantic >= 1.10.0 , < 2.0",
    "pendulum >= 2.1.2",
    "rich >= 13.0.0",
    "sqlmodel >= 0.0.8",
    "toml >= 0.10.2",

    # version specific
    "strenum >= 0.4.9; python_version < '3.11.0'",
    "typing_extensions >= 4.4.0; python_version < '3.8.0'",
]


[project.urls]
homepage = "https://thoughtspot.github.io/cs_tools/"
repository = "https://github.com/thoughtspot/cs_tools"
documentation = "https://thoughtspot.github.io/cs_tools/"

[project.optional-dependencies]
cli = [
    # pin these dependencies explicitly so we can ensure they work across environments
    # 
    # DEV NOTE @boonhapus 2023/01/14
    #   these are only the direct dependencies, NOT the transitive dependencies.. so we
    #   need an extra process to grab the grandchild dependencies so our direct reliance
    #   doesn't break when a child updates.
    #

    # platform-specific
    "pyreadline3 == 3.4.1 ; sys_platform == 'win32'",

    # "horde @ https://github.com/boonhapus/horde/archive/dev.zip",
    "typer[all] >= 0.9.0",

    # TODO: switch with LiteStar...
    "uvicorn >= 0.20.0",
    "fastapi >= 0.89.1",
    # Jinja2 = "^3.1.2"
    # starlette = "0.20.4"
]
dev = [
    "cs_tools[cli]",
    "coverage[toml]",
    "ruff",
    "nox",
    "ward == 0.67.2b0",
]
docs = [
    "cs_tools[cli]",
    "mkdocs-material",
    # Plugins..
    "mkdocs-glightbox",
    "mkdocs-open-in-new-tab",
]


[project.scripts]
cs_tools = "cs_tools.cli.main:run"
cstools = "cs_tools.cli.main:run"

[tool.setuptools.dynamic]
version = {attr = "cs_tools._version.__version__"}

# [tool.isort]
# profile = "black"
# line_length = 120
# from_first = true
# length_sort = true
# reverse_sort = true

[tool.ruff]
line-length = 120
select = [
    "A",     # flake8-builtins: https://pypi.org/project/flake8-builtins/
    "ARG",   # flake8-unused-arguments: https://pypi.org/project/flake8-unused-arguments/
    "B",     # flake8-bugbear: https://pypi.org/project/flake8-bugbear/
    "C4",    # flake8-comprehensions: https://pypi.org/project/flake8-comprehensions/
    "C90",   # mccabe: https://pypi.org/project/mccabe/
    "COM",   # flake8-commas: https://pypi.org/project/flake8-commas/
    "E",     # pycodestyle: https://pypi.org/project/pycodestyle/
    "F",     # pyflakes: https://pypi.org/project/pyflakes/
    "Q",     # flake8-quotes: https://pypi.org/project/flake8-quotes/
    "RUF",   # ruff-specific: https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf
    "TCH",   # flake8-type-checking: https://pypi.org/project/flake8-type-checking/
]
ignore = ["B008"]
src = ["cs_tools"]
exclude = [
    "__pycache__",   # ignore compiled bytecode
    ".venv*",        # ignore virtual environments
    ".nox",          # ignore virtual environments

    # project specific ignores
    "*compat.py",    # ignore compatibles
]

[tool.ward]
path = "tests/"

# [tool.coverage.run]
# branch = true
# include = [
#     "cs_tools/**.py",
# ]

[tool.coverage.report]
exclude_lines = [
    "# pragma: no cover",
    "# pragma: peephole optimzer",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]
